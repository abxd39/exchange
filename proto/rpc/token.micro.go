// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rpc/token.proto

package g2u

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TokenRPC service

type TokenRPCService interface {
	AdminCmd(ctx context.Context, in *AdminRequest, opts ...client.CallOption) (*AdminResponse, error)
}

type tokenRPCService struct {
	c    client.Client
	name string
}

func NewTokenRPCService(name string, c client.Client) TokenRPCService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "g2u"
	}
	return &tokenRPCService{
		c:    c,
		name: name,
	}
}

func (c *tokenRPCService) AdminCmd(ctx context.Context, in *AdminRequest, opts ...client.CallOption) (*AdminResponse, error) {
	req := c.c.NewRequest(c.name, "TokenRPC.AdminCmd", in)
	out := new(AdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TokenRPC service

type TokenRPCHandler interface {
	AdminCmd(context.Context, *AdminRequest, *AdminResponse) error
}

func RegisterTokenRPCHandler(s server.Server, hdlr TokenRPCHandler, opts ...server.HandlerOption) {
	type tokenRPC interface {
		AdminCmd(ctx context.Context, in *AdminRequest, out *AdminResponse) error
	}
	type TokenRPC struct {
		tokenRPC
	}
	h := &tokenRPCHandler{hdlr}
	s.Handle(s.NewHandler(&TokenRPC{h}, opts...))
}

type tokenRPCHandler struct {
	TokenRPCHandler
}

func (h *tokenRPCHandler) AdminCmd(ctx context.Context, in *AdminRequest, out *AdminResponse) error {
	return h.TokenRPCHandler.AdminCmd(ctx, in, out)
}
